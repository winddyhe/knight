using System.Threading.Tasks;
using System.IO;
using System.Threading;

namespace Knight.Framework.GameSave
{
    public class GameSaveDecryptFileStream : FileStream
    {
        // 加密解密key，随机生成
        public static readonly byte[] Key = {
            0x6F, 0x49, 0x9A, 0x5D, 0x9B, 0x73, 0xCD, 0x41, 0xFD, 0xF2, 0xDC, 0xF3, 0xDC, 0x35, 0xEF, 0x07,
            0x43, 0x50, 0x0D, 0x09, 0xA0, 0xAD, 0x20, 0x79, 0x23, 0x42, 0xBB, 0x25, 0x58, 0xEC, 0x6E, 0x93,
            0x32, 0x15, 0xB6, 0xD7, 0x28, 0x0B, 0x86, 0x6E, 0x09, 0x7C, 0x82, 0xC6, 0xF5, 0xF5, 0xE4, 0x8D,
            0x20, 0x18, 0x54, 0x07, 0x76, 0x05, 0xAE, 0x73, 0xEC, 0x61, 0x2C, 0xD6, 0xB8, 0x74, 0x7D, 0x96,
            0xA3, 0x47, 0x2E, 0xAB, 0x34, 0xAA, 0x18, 0x02, 0xB8, 0xF4, 0x55, 0x57, 0xD5, 0x01, 0xC5, 0x92,
            0x30, 0xF1, 0xD3, 0x1C, 0xC9, 0x38, 0xF5, 0x11, 0x6E, 0x7D, 0xAB, 0xCC, 0xFB, 0x3E, 0xB3, 0x50,
            0x21, 0x1D, 0x87, 0x3D, 0x6D, 0x9E, 0x33, 0xC8, 0x73, 0xA7, 0xDB, 0xA8, 0xF2, 0x75, 0xEB, 0x73,
            0x67, 0x0D, 0x24, 0xCC, 0x69, 0xDD, 0x13, 0xB0, 0xA9, 0x63, 0xB2, 0x5F, 0xCB, 0x65, 0x4D, 0xE9,
            0x5E, 0xD7, 0x2F, 0xEE, 0xC9, 0xBA, 0x9E, 0x79, 0x06, 0x76, 0xBB, 0xC7, 0x8D, 0xF8, 0xF4, 0x57,
            0xC3, 0x4A, 0x59, 0x3E, 0x94, 0x70, 0x82, 0x33, 0x74, 0x28, 0xF8, 0xB8, 0x6C, 0xD5, 0x20, 0xA6,
            0x17, 0x82, 0xCE, 0x28, 0x04, 0x6D, 0x4E, 0x63, 0x82, 0xB3, 0xDA, 0xDD, 0xC0, 0xFD, 0xDA, 0xBF,
            0x39, 0x59, 0x7D, 0x26, 0x68, 0xC3, 0x8D, 0x31, 0x85, 0x6A, 0x06, 0x62, 0xD5, 0x68, 0xC1, 0x81,
            0x0D, 0xE5, 0xB8, 0x66, 0x86, 0x07, 0x16, 0xB6, 0x28, 0xA4, 0xDF, 0xEF, 0xCB, 0x23, 0x2E, 0x60,
            0x58, 0x99, 0x6A, 0xF9, 0xEA, 0xC8, 0x1A, 0xA2, 0x8B, 0x09, 0xBF, 0xB6, 0xF8, 0x8C, 0xC6, 0xEE,
            0xA5, 0xAC, 0x26, 0xE9, 0xEF, 0x6B, 0x16, 0x1A, 0x5D, 0x8B, 0x65, 0x6D, 0x6C, 0xC8, 0x55, 0x25,
            0xF1, 0xFF, 0xA2, 0xE3, 0x8E, 0x66, 0x55, 0x19, 0xBF, 0x79, 0xEE, 0xF0, 0xB3, 0x67, 0xA3, 0xF7,
        };

        // 加密Key偏移量
        private int mKeyOffset;

        // 加密Key长度
        private int mKeyLength;

        public GameSaveDecryptFileStream(string rPath, FileMode rMode, FileAccess rAccess, FileShare rShare) 
            : base(rPath, rMode, rAccess, rShare)
        {
            this.mKeyOffset = 0;
            this.mKeyLength = Key.Length;
        }

        public override int Read(byte[] rBuffer, int nOffset, int nCount)
        {
            this.mKeyOffset = nOffset % this.mKeyLength;
            int nReaded = base.Read(rBuffer, nOffset, nCount);
            for (int i = 0; i < rBuffer.Length; ++i)
            {
                rBuffer[nOffset + i] ^= Key[this.mKeyOffset];
                ++this.mKeyOffset;
                this.mKeyOffset %= this.mKeyLength;
            }
            return nReaded;
        }

        public override void Write(byte[] rBuffer, int nOffset, int nCount)
        {
            this.mKeyOffset = nOffset % this.mKeyLength;
            for (int i = 0; i < rBuffer.Length; ++i)
            {
                rBuffer[nOffset + i] ^= Key[this.mKeyOffset];
                ++this.mKeyOffset;
                this.mKeyOffset %= this.mKeyLength;
            }
            base.Write(rBuffer, nOffset, nCount);
        }

        public override long Seek(long nOffset, SeekOrigin rOrigin)
        {
            long nRet = base.Seek(nOffset, rOrigin);
            this.mKeyOffset = (int)this.Position % this.mKeyLength;
            return nRet;
        }
    }
}
